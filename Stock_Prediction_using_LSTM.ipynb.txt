{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Kf07xbstXceU"
   },
   "source": [
    "# Stock Prediction using LSTM\n",
    "## Author: *Avishek Choudhary*\n",
    "<a href=\"https://www.linkedin.com/in/avishek-choudhary\"> ![](https://img.shields.io/badge/LinkedIn-ffefdb?style=for-the-badge&logo=linkedin&logoColor=blue)</a> <a href=\"https://www.github.com/avishek-choudhary\"> ![](https://img.shields.io/badge/Github-ffefdb?style=for-the-badge&logo=github&logoColor=black) </a>\n",
    "\n",
    "This is a time series forecasting problem. It is an attempt to forecast the data by understanding the previous data.\n",
    "\n",
    "**Table of Contents:**\n",
    "\n",
    "- [Introduction](#intro)\n",
    "- [Problem Statement](#1)\n",
    "- [Data Collection](#2)\n",
    "- [Data Exploration](#3)\n",
    "- [Data Pre-processing](#4)\n",
    "- [Creating a stacked LSTM model](#5)\n",
    "- [Prediction and plot of the test data](#6)\n",
    "- [Forecast for 30 days](#7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NtLfeTz50MP-"
   },
   "source": [
    "\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I4hXOvaEVjHf"
   },
   "source": [
    "## Introduction <a id=\"intro\"></a>\n",
    "\n",
    "Stock data is sequential data which means they need to be analysed according to the order of time. In Recurrent Neural Networks RNN we are dealt with the problem of vanishing gradient thus previous data will become less significant after long backpropagation. This means it's memory is not that deep.\n",
    "\n",
    "Long short-term memory (LSTM) is a model that increases the memory of recurrent neural networks. Recurrent neural networks hold short-term memory in that they allow earlier determining information to be employed in the current neural networks. For immediate tasks, the earlier data is used. We may not possess a list of all of the earlier information for the neural node. In RNNs, LSTMs are very widely used in Neural networks. So we use Long short-term memory LSTM. This is because stock prediction needs long-term memory."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qwYgPY_lV5UI"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "o6-GQbgfjdQI"
   },
   "source": [
    "## Problem Statement <a id=\"1\"></a>\n",
    "Take stock price of any company and predicts its price by using LSTM."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JEqTDKCE5LEh"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GYzPargLSgOm"
   },
   "source": [
    "## Data Collection <a id=\"2\"></a>\n",
    "Here we're using Tata Motors (TTM) stocks data.\n",
    "\n",
    "Collecting data from Tiingo.com using it's API."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "id": "HzvECREXNjoq"
   },
   "outputs": [],
   "source": [
    "#importing dependencies\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas_datareader as pdr\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "r5OhemgESZeo"
   },
   "outputs": [],
   "source": [
    "df = pdr.get_data_tiingo('TTM', api_key = key)        #'key' stores the API-key [!deleted]\n",
    "df.to_csv('TTM.csv')                                  #saving the data to CSV file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Kh-FVa1x5OeV"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vln6_tBCq56w"
   },
   "source": [
    "## Data Exploration <a id=\"3\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "lX-rVi8fTJLm",
    "outputId": "692d0790-fdd7-47ac-8f09-4860caf1cde7"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-343540ef-750e-45a6-b8d1-ce78239b07e9\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symbol</th>\n",
       "      <th>date</th>\n",
       "      <th>close</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>open</th>\n",
       "      <th>volume</th>\n",
       "      <th>adjClose</th>\n",
       "      <th>adjHigh</th>\n",
       "      <th>adjLow</th>\n",
       "      <th>adjOpen</th>\n",
       "      <th>adjVolume</th>\n",
       "      <th>divCash</th>\n",
       "      <th>splitFactor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TTM</td>\n",
       "      <td>2018-10-01 00:00:00+00:00</td>\n",
       "      <td>15.57</td>\n",
       "      <td>15.76</td>\n",
       "      <td>15.50</td>\n",
       "      <td>15.68</td>\n",
       "      <td>1261243</td>\n",
       "      <td>15.57</td>\n",
       "      <td>15.76</td>\n",
       "      <td>15.50</td>\n",
       "      <td>15.68</td>\n",
       "      <td>1261243</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TTM</td>\n",
       "      <td>2018-10-02 00:00:00+00:00</td>\n",
       "      <td>15.52</td>\n",
       "      <td>15.70</td>\n",
       "      <td>15.43</td>\n",
       "      <td>15.65</td>\n",
       "      <td>1118683</td>\n",
       "      <td>15.52</td>\n",
       "      <td>15.70</td>\n",
       "      <td>15.43</td>\n",
       "      <td>15.65</td>\n",
       "      <td>1118683</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TTM</td>\n",
       "      <td>2018-10-03 00:00:00+00:00</td>\n",
       "      <td>15.38</td>\n",
       "      <td>15.58</td>\n",
       "      <td>15.33</td>\n",
       "      <td>15.50</td>\n",
       "      <td>917886</td>\n",
       "      <td>15.38</td>\n",
       "      <td>15.58</td>\n",
       "      <td>15.33</td>\n",
       "      <td>15.50</td>\n",
       "      <td>917886</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TTM</td>\n",
       "      <td>2018-10-04 00:00:00+00:00</td>\n",
       "      <td>14.93</td>\n",
       "      <td>15.26</td>\n",
       "      <td>14.82</td>\n",
       "      <td>15.26</td>\n",
       "      <td>1977704</td>\n",
       "      <td>14.93</td>\n",
       "      <td>15.26</td>\n",
       "      <td>14.82</td>\n",
       "      <td>15.26</td>\n",
       "      <td>1977704</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TTM</td>\n",
       "      <td>2018-10-05 00:00:00+00:00</td>\n",
       "      <td>14.52</td>\n",
       "      <td>14.70</td>\n",
       "      <td>14.23</td>\n",
       "      <td>14.70</td>\n",
       "      <td>2157804</td>\n",
       "      <td>14.52</td>\n",
       "      <td>14.70</td>\n",
       "      <td>14.23</td>\n",
       "      <td>14.70</td>\n",
       "      <td>2157804</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-343540ef-750e-45a6-b8d1-ce78239b07e9')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-343540ef-750e-45a6-b8d1-ce78239b07e9 button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-343540ef-750e-45a6-b8d1-ce78239b07e9');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-ec8e64ba-faa4-4022-a483-f6f7f247c9cc\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec8e64ba-faa4-4022-a483-f6f7f247c9cc')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-ec8e64ba-faa4-4022-a483-f6f7f247c9cc button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "  symbol                       date  close   high    low   open   volume  \\\n",
       "0    TTM  2018-10-01 00:00:00+00:00  15.57  15.76  15.50  15.68  1261243   \n",
       "1    TTM  2018-10-02 00:00:00+00:00  15.52  15.70  15.43  15.65  1118683   \n",
       "2    TTM  2018-10-03 00:00:00+00:00  15.38  15.58  15.33  15.50   917886   \n",
       "3    TTM  2018-10-04 00:00:00+00:00  14.93  15.26  14.82  15.26  1977704   \n",
       "4    TTM  2018-10-05 00:00:00+00:00  14.52  14.70  14.23  14.70  2157804   \n",
       "\n",
       "   adjClose  adjHigh  adjLow  adjOpen  adjVolume  divCash  splitFactor  \n",
       "0     15.57    15.76   15.50    15.68    1261243      0.0          1.0  \n",
       "1     15.52    15.70   15.43    15.65    1118683      0.0          1.0  \n",
       "2     15.38    15.58   15.33    15.50     917886      0.0          1.0  \n",
       "3     14.93    15.26   14.82    15.26    1977704      0.0          1.0  \n",
       "4     14.52    14.70   14.23    14.70    2157804      0.0          1.0  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('TTM.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-WI5KkOvZ_YC",
    "outputId": "d0a04a4b-6c62-4fc0-a21c-faeea1c7e16c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1162 entries, 0 to 1161\n",
      "Data columns (total 14 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   symbol       1162 non-null   object \n",
      " 1   date         1162 non-null   object \n",
      " 2   close        1162 non-null   float64\n",
      " 3   high         1162 non-null   float64\n",
      " 4   low          1162 non-null   float64\n",
      " 5   open         1162 non-null   float64\n",
      " 6   volume       1162 non-null   int64  \n",
      " 7   adjClose     1162 non-null   float64\n",
      " 8   adjHigh      1162 non-null   float64\n",
      " 9   adjLow       1162 non-null   float64\n",
      " 10  adjOpen      1162 non-null   float64\n",
      " 11  adjVolume    1162 non-null   int64  \n",
      " 12  divCash      1162 non-null   float64\n",
      " 13  splitFactor  1162 non-null   float64\n",
      "dtypes: float64(10), int64(2), object(2)\n",
      "memory usage: 127.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WbzlulDRI_CG"
   },
   "source": [
    "The dataset contains 14 columns associated with time series like the *date* and the different variables like close, high, low, volume, etc.\n",
    "\n",
    "We will use **close** column values for our experimentation of time series with LSTM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 238
    },
    "id": "o1xR_aykaPGB",
    "outputId": "6a63d767-c96c-43ee-ac1e-012f500c72e9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-c5aaee01-9d44-43d5-b744-3274e5044c1c\" class=\"colab-df-container\">\n",
       "    <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>symbol</th>\n",
       "      <th>close</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>open</th>\n",
       "      <th>volume</th>\n",
       "      <th>adjClose</th>\n",
       "      <th>adjHigh</th>\n",
       "      <th>adjLow</th>\n",
       "      <th>adjOpen</th>\n",
       "      <th>adjVolume</th>\n",
       "      <th>divCash</th>\n",
       "      <th>splitFactor</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-10-01 00:00:00+00:00</th>\n",
       "      <td>TTM</td>\n",
       "      <td>15.57</td>\n",
       "      <td>15.76</td>\n",
       "      <td>15.50</td>\n",
       "      <td>15.68</td>\n",
       "      <td>1261243</td>\n",
       "      <td>15.57</td>\n",
       "      <td>15.76</td>\n",
       "      <td>15.50</td>\n",
       "      <td>15.68</td>\n",
       "      <td>1261243</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-02 00:00:00+00:00</th>\n",
       "      <td>TTM</td>\n",
       "      <td>15.52</td>\n",
       "      <td>15.70</td>\n",
       "      <td>15.43</td>\n",
       "      <td>15.65</td>\n",
       "      <td>1118683</td>\n",
       "      <td>15.52</td>\n",
       "      <td>15.70</td>\n",
       "      <td>15.43</td>\n",
       "      <td>15.65</td>\n",
       "      <td>1118683</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-03 00:00:00+00:00</th>\n",
       "      <td>TTM</td>\n",
       "      <td>15.38</td>\n",
       "      <td>15.58</td>\n",
       "      <td>15.33</td>\n",
       "      <td>15.50</td>\n",
       "      <td>917886</td>\n",
       "      <td>15.38</td>\n",
       "      <td>15.58</td>\n",
       "      <td>15.33</td>\n",
       "      <td>15.50</td>\n",
       "      <td>917886</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-04 00:00:00+00:00</th>\n",
       "      <td>TTM</td>\n",
       "      <td>14.93</td>\n",
       "      <td>15.26</td>\n",
       "      <td>14.82</td>\n",
       "      <td>15.26</td>\n",
       "      <td>1977704</td>\n",
       "      <td>14.93</td>\n",
       "      <td>15.26</td>\n",
       "      <td>14.82</td>\n",
       "      <td>15.26</td>\n",
       "      <td>1977704</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-05 00:00:00+00:00</th>\n",
       "      <td>TTM</td>\n",
       "      <td>14.52</td>\n",
       "      <td>14.70</td>\n",
       "      <td>14.23</td>\n",
       "      <td>14.70</td>\n",
       "      <td>2157804</td>\n",
       "      <td>14.52</td>\n",
       "      <td>14.70</td>\n",
       "      <td>14.23</td>\n",
       "      <td>14.70</td>\n",
       "      <td>2157804</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "    <div class=\"colab-df-buttons\">\n",
       "\n",
       "  <div class=\"colab-df-container\">\n",
       "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5aaee01-9d44-43d5-b744-3274e5044c1c')\"\n",
       "            title=\"Convert this dataframe to an interactive table.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
       "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
       "  </svg>\n",
       "    </button>\n",
       "\n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    .colab-df-buttons div {\n",
       "      margin-bottom: 4px;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "    <script>\n",
       "      const buttonEl =\n",
       "        document.querySelector('#df-c5aaee01-9d44-43d5-b744-3274e5044c1c button.colab-df-convert');\n",
       "      buttonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "      async function convertToInteractive(key) {\n",
       "        const element = document.querySelector('#df-c5aaee01-9d44-43d5-b744-3274e5044c1c');\n",
       "        const dataTable =\n",
       "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                    [key], {});\n",
       "        if (!dataTable) return;\n",
       "\n",
       "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "          + ' to learn more about interactive tables.';\n",
       "        element.innerHTML = '';\n",
       "        dataTable['output_type'] = 'display_data';\n",
       "        await google.colab.output.renderOutput(dataTable, element);\n",
       "        const docLink = document.createElement('div');\n",
       "        docLink.innerHTML = docLinkHtml;\n",
       "        element.appendChild(docLink);\n",
       "      }\n",
       "    </script>\n",
       "  </div>\n",
       "\n",
       "\n",
       "<div id=\"df-c93be07f-60ae-49b7-8fd6-d430cf6734bd\">\n",
       "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c93be07f-60ae-49b7-8fd6-d430cf6734bd')\"\n",
       "            title=\"Suggest charts.\"\n",
       "            style=\"display:none;\">\n",
       "\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "     width=\"24px\">\n",
       "    <g>\n",
       "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
       "    </g>\n",
       "</svg>\n",
       "  </button>\n",
       "\n",
       "<style>\n",
       "  .colab-df-quickchart {\n",
       "      --bg-color: #E8F0FE;\n",
       "      --fill-color: #1967D2;\n",
       "      --hover-bg-color: #E2EBFA;\n",
       "      --hover-fill-color: #174EA6;\n",
       "      --disabled-fill-color: #AAA;\n",
       "      --disabled-bg-color: #DDD;\n",
       "  }\n",
       "\n",
       "  [theme=dark] .colab-df-quickchart {\n",
       "      --bg-color: #3B4455;\n",
       "      --fill-color: #D2E3FC;\n",
       "      --hover-bg-color: #434B5C;\n",
       "      --hover-fill-color: #FFFFFF;\n",
       "      --disabled-bg-color: #3B4455;\n",
       "      --disabled-fill-color: #666;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart {\n",
       "    background-color: var(--bg-color);\n",
       "    border: none;\n",
       "    border-radius: 50%;\n",
       "    cursor: pointer;\n",
       "    display: none;\n",
       "    fill: var(--fill-color);\n",
       "    height: 32px;\n",
       "    padding: 0;\n",
       "    width: 32px;\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart:hover {\n",
       "    background-color: var(--hover-bg-color);\n",
       "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "    fill: var(--button-hover-fill-color);\n",
       "  }\n",
       "\n",
       "  .colab-df-quickchart-complete:disabled,\n",
       "  .colab-df-quickchart-complete:disabled:hover {\n",
       "    background-color: var(--disabled-bg-color);\n",
       "    fill: var(--disabled-fill-color);\n",
       "    box-shadow: none;\n",
       "  }\n",
       "\n",
       "  .colab-df-spinner {\n",
       "    border: 2px solid var(--fill-color);\n",
       "    border-color: transparent;\n",
       "    border-bottom-color: var(--fill-color);\n",
       "    animation:\n",
       "      spin 1s steps(1) infinite;\n",
       "  }\n",
       "\n",
       "  @keyframes spin {\n",
       "    0% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "      border-left-color: var(--fill-color);\n",
       "    }\n",
       "    20% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    30% {\n",
       "      border-color: transparent;\n",
       "      border-left-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    40% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-top-color: var(--fill-color);\n",
       "    }\n",
       "    60% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "    }\n",
       "    80% {\n",
       "      border-color: transparent;\n",
       "      border-right-color: var(--fill-color);\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "    90% {\n",
       "      border-color: transparent;\n",
       "      border-bottom-color: var(--fill-color);\n",
       "    }\n",
       "  }\n",
       "</style>\n",
       "\n",
       "  <script>\n",
       "    async function quickchart(key) {\n",
       "      const quickchartButtonEl =\n",
       "        document.querySelector('#' + key + ' button');\n",
       "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
       "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
       "      try {\n",
       "        const charts = await google.colab.kernel.invokeFunction(\n",
       "            'suggestCharts', [key], {});\n",
       "      } catch (error) {\n",
       "        console.error('Error during call to suggestCharts:', error);\n",
       "      }\n",
       "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
       "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
       "    }\n",
       "    (() => {\n",
       "      let quickchartButtonEl =\n",
       "        document.querySelector('#df-c93be07f-60ae-49b7-8fd6-d430cf6734bd button');\n",
       "      quickchartButtonEl.style.display =\n",
       "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "    })();\n",
       "  </script>\n",
       "</div>\n",
       "    </div>\n",
       "  </div>\n"
      ],
      "text/plain": [
       "                          symbol  close   high    low   open   volume  \\\n",
       "date                                                                    \n",
       "2018-10-01 00:00:00+00:00    TTM  15.57  15.76  15.50  15.68  1261243   \n",
       "2018-10-02 00:00:00+00:00    TTM  15.52  15.70  15.43  15.65  1118683   \n",
       "2018-10-03 00:00:00+00:00    TTM  15.38  15.58  15.33  15.50   917886   \n",
       "2018-10-04 00:00:00+00:00    TTM  14.93  15.26  14.82  15.26  1977704   \n",
       "2018-10-05 00:00:00+00:00    TTM  14.52  14.70  14.23  14.70  2157804   \n",
       "\n",
       "                           adjClose  adjHigh  adjLow  adjOpen  adjVolume  \\\n",
       "date                                                                       \n",
       "2018-10-01 00:00:00+00:00     15.57    15.76   15.50    15.68    1261243   \n",
       "2018-10-02 00:00:00+00:00     15.52    15.70   15.43    15.65    1118683   \n",
       "2018-10-03 00:00:00+00:00     15.38    15.58   15.33    15.50     917886   \n",
       "2018-10-04 00:00:00+00:00     14.93    15.26   14.82    15.26    1977704   \n",
       "2018-10-05 00:00:00+00:00     14.52    14.70   14.23    14.70    2157804   \n",
       "\n",
       "                           divCash  splitFactor  \n",
       "date                                             \n",
       "2018-10-01 00:00:00+00:00      0.0          1.0  \n",
       "2018-10-02 00:00:00+00:00      0.0          1.0  \n",
       "2018-10-03 00:00:00+00:00      0.0          1.0  \n",
       "2018-10-04 00:00:00+00:00      0.0          1.0  \n",
       "2018-10-05 00:00:00+00:00      0.0          1.0  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('TTM.csv', parse_dates=True, index_col='date')       #replacing date column values as index\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 559
    },
    "id": "hBUthYsyat-4",
    "outputId": "be20ad27-8bad-464a-9ef7-d890515e3ab3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a719d156b00>]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Stock Price')\n",
    "plt.plot(df['close'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QGlFl-AcUIe8",
    "outputId": "54333517-76ea-4b56-ff10-8f9629223a1f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date\n",
       "2018-10-01 00:00:00+00:00    15.57\n",
       "2018-10-02 00:00:00+00:00    15.52\n",
       "2018-10-03 00:00:00+00:00    15.38\n",
       "2018-10-04 00:00:00+00:00    14.93\n",
       "2018-10-05 00:00:00+00:00    14.52\n",
       "                             ...  \n",
       "2023-05-08 00:00:00+00:00    25.14\n",
       "2023-05-09 00:00:00+00:00    25.14\n",
       "2023-05-10 00:00:00+00:00    25.14\n",
       "2023-05-11 00:00:00+00:00    25.14\n",
       "2023-05-12 00:00:00+00:00    25.14\n",
       "Name: close, Length: 1162, dtype: float64"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_close = df['close']\n",
    "df_close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "id": "5HxymDg0Vh7w"
   },
   "outputs": [],
   "source": [
    "df_close.reset_index(drop = True, inplace = True)             #resetting index back to default"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zWEARq41z_wG"
   },
   "source": [
    "\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dAq1MZE5sZmy"
   },
   "source": [
    "## Pre-processing the data <a id=\"4\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "j2VvWMFWdvlg"
   },
   "source": [
    "LSTM are sensitive to the scale of the data. So we apply MinMax scaler. Min-max scaler is used for scaling the data so that we can bring all the price values to a common scale."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "id": "Hy9vA5WSZb70"
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "df_close = scaler.fit_transform(np.array(df_close).reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OSIXvjk9eqGa",
    "outputId": "1ac469da-3039-439e-bab4-31242273bb24"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1162, 1)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_close.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xInGurKLe9-4"
   },
   "source": [
    "Splitting the dataset into Train and Test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "id": "PWFKWO-eessh"
   },
   "outputs": [],
   "source": [
    "training_size = int(len(df_close) * 0.70)                   #training with 70% of data\n",
    "test_size = len(df_close) - training_size                   #testing the remaining 30%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "id": "pbg8VPyQgNOs"
   },
   "outputs": [],
   "source": [
    "train_data = df_close[0:training_size,:]\n",
    "test_data = df_close[training_size:len(df_close),:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "id": "JpFZmUTYg5xs"
   },
   "outputs": [],
   "source": [
    "#converting an array of values into a dataset matrix\n",
    "def create_dataset(dataset, time_step=1):\n",
    "  dataX, dataY = [], []\n",
    "  for i in range(len(dataset)-time_step-1):\n",
    "    a = dataset[i:(i+time_step), 0]\n",
    "    dataX.append(a)\n",
    "    dataY.append(dataset[i + time_step, 0])\n",
    "  return np.array(dataX), np.array(dataY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "id": "gwMpAbh7muX8"
   },
   "outputs": [],
   "source": [
    "#reshape into X=t, t+1, t+2, t+3 and Y=t+4\n",
    "time_step = 100\n",
    "xtrain, ytrain = create_dataset(train_data, time_step)\n",
    "xtest, ytest = create_dataset(test_data, time_step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "to-3piivnhe4",
    "outputId": "1646d936-94d0-44c2-e988-e36397c7ad2c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((712, 100), (712,))"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtrain.shape, ytrain.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6wbzfd3Gn56b",
    "outputId": "159b9dcc-8af6-4c10-b13a-42f9677e7bfe"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((248, 100), (248,))"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtest.shape, ytest.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "id": "8IhO_8wzoCfn"
   },
   "outputs": [],
   "source": [
    "#reshape the input to be [samples, time steps, features] which is required for LSTM\n",
    "xtrain = xtrain.reshape(xtrain.shape[0], xtrain.shape[1], 1)\n",
    "xtest = xtest.reshape(xtest.shape[0], xtest.shape[1], 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yhrVHI6u0qDj"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "luztuUrSsFJf"
   },
   "source": [
    "## Creating the LSTM model <a id=\"5\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "id": "ZbKZz_hVsDnK"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.layers import LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "id": "1LLliAj9tr8f"
   },
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(LSTM(50, return_sequences=True, input_shape=(100, 1)))\n",
    "model.add(LSTM(50, return_sequences=True))\n",
    "model.add(LSTM(50))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mean_squared_error', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YSwMvyzHvWwP",
    "outputId": "23f3ff47-88a6-4a36-8e2b-4058c9542303"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_3 (LSTM)               (None, 100, 50)           10400     \n",
      "                                                                 \n",
      " lstm_4 (LSTM)               (None, 100, 50)           20200     \n",
      "                                                                 \n",
      " lstm_5 (LSTM)               (None, 50)                20200     \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 51        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 50851 (198.64 KB)\n",
      "Trainable params: 50851 (198.64 KB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LRycOjN3vdPq",
    "outputId": "ebb270c2-8267-499e-be3e-f66e94887380"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "12/12 [==============================] - 6s 178ms/step - loss: 0.0592 - val_loss: 0.0171\n",
      "Epoch 2/100\n",
      "12/12 [==============================] - 1s 116ms/step - loss: 0.0117 - val_loss: 0.0062\n",
      "Epoch 3/100\n",
      "12/12 [==============================] - 2s 146ms/step - loss: 0.0052 - val_loss: 0.0022\n",
      "Epoch 4/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0038 - val_loss: 0.0030\n",
      "Epoch 5/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0033 - val_loss: 0.0033\n",
      "Epoch 6/100\n",
      "12/12 [==============================] - 1s 126ms/step - loss: 0.0032 - val_loss: 0.0016\n",
      "Epoch 7/100\n",
      "12/12 [==============================] - 2s 136ms/step - loss: 0.0029 - val_loss: 0.0032\n",
      "Epoch 8/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0030 - val_loss: 0.0021\n",
      "Epoch 9/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 0.0025 - val_loss: 0.0017\n",
      "Epoch 10/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0022 - val_loss: 0.0014\n",
      "Epoch 11/100\n",
      "12/12 [==============================] - 2s 153ms/step - loss: 0.0022 - val_loss: 0.0022\n",
      "Epoch 12/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0029 - val_loss: 0.0018\n",
      "Epoch 13/100\n",
      "12/12 [==============================] - 1s 102ms/step - loss: 0.0022 - val_loss: 0.0010\n",
      "Epoch 14/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0020 - val_loss: 0.0015\n",
      "Epoch 15/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0021 - val_loss: 0.0011\n",
      "Epoch 16/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 0.0019 - val_loss: 0.0011\n",
      "Epoch 17/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 0.0019 - val_loss: 0.0018\n",
      "Epoch 18/100\n",
      "12/12 [==============================] - 1s 103ms/step - loss: 0.0019 - val_loss: 0.0013\n",
      "Epoch 19/100\n",
      "12/12 [==============================] - 1s 109ms/step - loss: 0.0018 - val_loss: 0.0040\n",
      "Epoch 20/100\n",
      "12/12 [==============================] - 2s 154ms/step - loss: 0.0021 - val_loss: 0.0011\n",
      "Epoch 21/100\n",
      "12/12 [==============================] - 1s 103ms/step - loss: 0.0018 - val_loss: 0.0026\n",
      "Epoch 22/100\n",
      "12/12 [==============================] - 1s 103ms/step - loss: 0.0018 - val_loss: 0.0020\n",
      "Epoch 23/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 0.0016 - val_loss: 0.0011\n",
      "Epoch 24/100\n",
      "12/12 [==============================] - 1s 101ms/step - loss: 0.0016 - val_loss: 0.0014\n",
      "Epoch 25/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0015 - val_loss: 8.4203e-04\n",
      "Epoch 26/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0015 - val_loss: 0.0013\n",
      "Epoch 27/100\n",
      "12/12 [==============================] - 1s 103ms/step - loss: 0.0015 - val_loss: 8.5493e-04\n",
      "Epoch 28/100\n",
      "12/12 [==============================] - 1s 109ms/step - loss: 0.0014 - val_loss: 8.1031e-04\n",
      "Epoch 29/100\n",
      "12/12 [==============================] - 2s 150ms/step - loss: 0.0014 - val_loss: 8.6197e-04\n",
      "Epoch 30/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0014 - val_loss: 7.7496e-04\n",
      "Epoch 31/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0014 - val_loss: 7.4390e-04\n",
      "Epoch 32/100\n",
      "12/12 [==============================] - 1s 102ms/step - loss: 0.0013 - val_loss: 0.0011\n",
      "Epoch 33/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 0.0013 - val_loss: 7.1724e-04\n",
      "Epoch 34/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 0.0012 - val_loss: 7.5508e-04\n",
      "Epoch 35/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0012 - val_loss: 7.1009e-04\n",
      "Epoch 36/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0012 - val_loss: 7.1658e-04\n",
      "Epoch 37/100\n",
      "12/12 [==============================] - 1s 112ms/step - loss: 0.0011 - val_loss: 6.8832e-04\n",
      "Epoch 38/100\n",
      "12/12 [==============================] - 2s 149ms/step - loss: 0.0011 - val_loss: 8.3367e-04\n",
      "Epoch 39/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 0.0011 - val_loss: 7.3132e-04\n",
      "Epoch 40/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0011 - val_loss: 6.3291e-04\n",
      "Epoch 41/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 0.0011 - val_loss: 7.6535e-04\n",
      "Epoch 42/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0012 - val_loss: 7.8383e-04\n",
      "Epoch 43/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 0.0011 - val_loss: 0.0022\n",
      "Epoch 44/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0011 - val_loss: 5.8848e-04\n",
      "Epoch 45/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 0.0010 - val_loss: 6.8124e-04\n",
      "Epoch 46/100\n",
      "12/12 [==============================] - 1s 118ms/step - loss: 0.0010 - val_loss: 8.9233e-04\n",
      "Epoch 47/100\n",
      "12/12 [==============================] - 2s 143ms/step - loss: 9.1797e-04 - val_loss: 7.2089e-04\n",
      "Epoch 48/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 9.0193e-04 - val_loss: 5.5357e-04\n",
      "Epoch 49/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 9.4006e-04 - val_loss: 9.2355e-04\n",
      "Epoch 50/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 9.7200e-04 - val_loss: 0.0019\n",
      "Epoch 51/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 9.9931e-04 - val_loss: 0.0013\n",
      "Epoch 52/100\n",
      "12/12 [==============================] - 1s 103ms/step - loss: 0.0012 - val_loss: 0.0022\n",
      "Epoch 53/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 9.6433e-04 - val_loss: 5.5391e-04\n",
      "Epoch 54/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 8.4684e-04 - val_loss: 5.7712e-04\n",
      "Epoch 55/100\n",
      "12/12 [==============================] - 2s 128ms/step - loss: 9.5904e-04 - val_loss: 0.0013\n",
      "Epoch 56/100\n",
      "12/12 [==============================] - 2s 133ms/step - loss: 8.7633e-04 - val_loss: 6.5224e-04\n",
      "Epoch 57/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 8.3160e-04 - val_loss: 8.1150e-04\n",
      "Epoch 58/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 7.7444e-04 - val_loss: 7.8302e-04\n",
      "Epoch 59/100\n",
      "12/12 [==============================] - 1s 102ms/step - loss: 8.0227e-04 - val_loss: 0.0011\n",
      "Epoch 60/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 7.6614e-04 - val_loss: 5.3873e-04\n",
      "Epoch 61/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 7.5425e-04 - val_loss: 0.0012\n",
      "Epoch 62/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 8.0049e-04 - val_loss: 7.6760e-04\n",
      "Epoch 63/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 7.1429e-04 - val_loss: 5.0057e-04\n",
      "Epoch 64/100\n",
      "12/12 [==============================] - 2s 132ms/step - loss: 6.8419e-04 - val_loss: 4.6937e-04\n",
      "Epoch 65/100\n",
      "12/12 [==============================] - 2s 131ms/step - loss: 7.1756e-04 - val_loss: 8.6616e-04\n",
      "Epoch 66/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 9.5144e-04 - val_loss: 0.0017\n",
      "Epoch 67/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 8.3856e-04 - val_loss: 8.7360e-04\n",
      "Epoch 68/100\n",
      "12/12 [==============================] - 1s 108ms/step - loss: 6.9038e-04 - val_loss: 4.7363e-04\n",
      "Epoch 69/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 6.2693e-04 - val_loss: 4.5404e-04\n",
      "Epoch 70/100\n",
      "12/12 [==============================] - 1s 108ms/step - loss: 6.5719e-04 - val_loss: 8.6109e-04\n",
      "Epoch 71/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 6.4081e-04 - val_loss: 0.0025\n",
      "Epoch 72/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 7.7639e-04 - val_loss: 8.0125e-04\n",
      "Epoch 73/100\n",
      "12/12 [==============================] - 2s 144ms/step - loss: 6.8024e-04 - val_loss: 4.3797e-04\n",
      "Epoch 74/100\n",
      "12/12 [==============================] - 1s 115ms/step - loss: 5.8553e-04 - val_loss: 5.5418e-04\n",
      "Epoch 75/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 5.8641e-04 - val_loss: 7.7004e-04\n",
      "Epoch 76/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 6.3753e-04 - val_loss: 6.7017e-04\n",
      "Epoch 77/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 6.2951e-04 - val_loss: 5.2165e-04\n",
      "Epoch 78/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 6.8824e-04 - val_loss: 5.5635e-04\n",
      "Epoch 79/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 6.1885e-04 - val_loss: 4.3800e-04\n",
      "Epoch 80/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 5.7200e-04 - val_loss: 6.9178e-04\n",
      "Epoch 81/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 5.8142e-04 - val_loss: 6.0785e-04\n",
      "Epoch 82/100\n",
      "12/12 [==============================] - 2s 154ms/step - loss: 7.0951e-04 - val_loss: 4.6806e-04\n",
      "Epoch 83/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 5.5071e-04 - val_loss: 4.6215e-04\n",
      "Epoch 84/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 5.5418e-04 - val_loss: 4.0227e-04\n",
      "Epoch 85/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 5.4999e-04 - val_loss: 4.1594e-04\n",
      "Epoch 86/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 6.0195e-04 - val_loss: 4.2274e-04\n",
      "Epoch 87/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 6.9759e-04 - val_loss: 8.5579e-04\n",
      "Epoch 88/100\n",
      "12/12 [==============================] - 1s 106ms/step - loss: 5.5120e-04 - val_loss: 6.5943e-04\n",
      "Epoch 89/100\n",
      "12/12 [==============================] - 1s 103ms/step - loss: 5.4719e-04 - val_loss: 8.6841e-04\n",
      "Epoch 90/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 5.5514e-04 - val_loss: 0.0016\n",
      "Epoch 91/100\n",
      "12/12 [==============================] - 2s 155ms/step - loss: 5.8422e-04 - val_loss: 0.0039\n",
      "Epoch 92/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 8.5104e-04 - val_loss: 3.8473e-04\n",
      "Epoch 93/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 5.5009e-04 - val_loss: 4.7177e-04\n",
      "Epoch 94/100\n",
      "12/12 [==============================] - 1s 104ms/step - loss: 4.8574e-04 - val_loss: 4.2493e-04\n",
      "Epoch 95/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 4.8401e-04 - val_loss: 7.3921e-04\n",
      "Epoch 96/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 5.0623e-04 - val_loss: 4.1155e-04\n",
      "Epoch 97/100\n",
      "12/12 [==============================] - 1s 105ms/step - loss: 4.8456e-04 - val_loss: 4.0255e-04\n",
      "Epoch 98/100\n",
      "12/12 [==============================] - 1s 107ms/step - loss: 5.7500e-04 - val_loss: 3.5308e-04\n",
      "Epoch 99/100\n",
      "12/12 [==============================] - 1s 112ms/step - loss: 4.8742e-04 - val_loss: 5.3740e-04\n",
      "Epoch 100/100\n",
      "12/12 [==============================] - 2s 151ms/step - loss: 4.6174e-04 - val_loss: 4.1898e-04\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x7a719e3ad060>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=100, batch_size=64, verbose=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_wDzMePf-Xsw"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PT43323b-OUt"
   },
   "source": [
    "## Predicting and plotting test data <a id=\"6\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FoTIQeXdxRdX",
    "outputId": "a1b6d238-9d3d-4051-e173-089574cc6367"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23/23 [==============================] - 1s 20ms/step\n",
      "8/8 [==============================] - 0s 20ms/step\n"
     ]
    }
   ],
   "source": [
    "#predicting and checking performance metrics\n",
    "train_predict = model.predict(xtrain)\n",
    "test_predict = model.predict(xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "id": "m1r2TnQ-yQi2"
   },
   "outputs": [],
   "source": [
    "#transforming back to original form\n",
    "train_predict = scaler.inverse_transform(train_predict)\n",
    "test_predict = scaler.inverse_transform(test_predict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dK1niwXwzuoq"
   },
   "source": [
    "Calculating RMSE performance metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "id": "2LerL2u2yl69"
   },
   "outputs": [],
   "source": [
    "import math\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Kj4Pe5oZzCjU",
    "outputId": "310b74bd-15cf-44a4-daab-d106efed6220"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.896492222562548"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Train data RMSE\n",
    "math.sqrt(mean_squared_error(ytrain, train_predict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "G1bK3q1CzW77",
    "outputId": "d7bcc90c-ec12-4b60-8ec2-568bbe19b45a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25.641301578978133"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Test data RMSE\n",
    "math.sqrt(mean_squared_error(ytest, test_predict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "id": "cAjfdToCzc87"
   },
   "outputs": [],
   "source": [
    "#shifting train predictions for plotting\n",
    "look_back = 100\n",
    "trainPredictPlot = np.empty_like(df_close)\n",
    "trainPredictPlot[:, :] = np.nan\n",
    "trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n",
    "#shifting test predictions for plotting\n",
    "testPredictPlot = np.empty_like(df_close)\n",
    "testPredictPlot[:, :] = np.nan\n",
    "testPredictPlot[len(train_predict)+(look_back*2)+1:len(df_close)-1,:] = test_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 522
    },
    "id": "S9U-7CH11118",
    "outputId": "f4e8ec48-6bd5-43f0-e377-abdf1267731b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(scaler.inverse_transform(df_close))\n",
    "plt.plot(trainPredictPlot)\n",
    "plt.plot(testPredictPlot)\n",
    "plt.legend(['Original Data', 'Train Data', 'Test Data'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "A3CbCDPc-dG2"
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8lb5siwU7vp0"
   },
   "source": [
    "## Forecasting the data for 30 days <a id=\"7\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Ng0GAWeW2EmO",
    "outputId": "3fe26e1a-bcb5-443a-cf3d-38f426946ef6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "349"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "APBXv6SC5jmh",
    "outputId": "9be4b691-739f-497e-a2fd-ef6fe18b1cbb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 100)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xinput = test_data[len(test_data)-100:].reshape(1, -1)\n",
    "xinput.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "id": "aW6__Ubk6OMh"
   },
   "outputs": [],
   "source": [
    "#converting into list\n",
    "temp_ip = list(xinput)\n",
    "temp_ip = temp_ip[0].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DNmAaFnO6suO",
    "outputId": "f375de17-21a5-4ee3-a588-f3e86d403cce"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.663642255346727,\n",
       " 0.6701231367465976,\n",
       " 0.6461438755670771,\n",
       " 0.6085547634478289,\n",
       " 0.5920285158781594,\n",
       " 0.6215165262475697,\n",
       " 0.6231367465975373,\n",
       " 0.6198963058976021,\n",
       " 0.6166558651976669,\n",
       " 0.6318859364873622,\n",
       " 0.6182760855476345,\n",
       " 0.6127673363577446,\n",
       " 0.6237848347375242,\n",
       " 0.6464679196370706,\n",
       " 0.6837329876863253,\n",
       " 0.695398574206092,\n",
       " 0.6824368114063513,\n",
       " 0.6749837977965003,\n",
       " 0.671095268956578,\n",
       " 0.6584575502268308,\n",
       " 0.6555411535968891,\n",
       " 0.6740116655865197,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513,\n",
       " 0.6824368114063513]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_ip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MxtS8uzP7InN",
    "outputId": "e999b371-d009-4153-d4ef-f5c3ecf0afab"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.69105506]\n",
      "101\n",
      "1 day input [0.67012314 0.64614388 0.60855476 0.59202852 0.62151653 0.62313675\n",
      " 0.61989631 0.61665587 0.63188594 0.61827609 0.61276734 0.62378483\n",
      " 0.64646792 0.68373299 0.69539857 0.68243681 0.6749838  0.67109527\n",
      " 0.65845755 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.69105506]\n",
      "1 day output [[0.6951458]]\n",
      "2 day input [0.64614388 0.60855476 0.59202852 0.62151653 0.62313675 0.61989631\n",
      " 0.61665587 0.63188594 0.61827609 0.61276734 0.62378483 0.64646792\n",
      " 0.68373299 0.69539857 0.68243681 0.6749838  0.67109527 0.65845755\n",
      " 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.69105506 0.69514579]\n",
      "2 day output [[0.70110106]]\n",
      "3 day input [0.60855476 0.59202852 0.62151653 0.62313675 0.61989631 0.61665587\n",
      " 0.63188594 0.61827609 0.61276734 0.62378483 0.64646792 0.68373299\n",
      " 0.69539857 0.68243681 0.6749838  0.67109527 0.65845755 0.65554115\n",
      " 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.69105506 0.69514579 0.70110106]\n",
      "3 day output [[0.70749176]]\n",
      "4 day input [0.59202852 0.62151653 0.62313675 0.61989631 0.61665587 0.63188594\n",
      " 0.61827609 0.61276734 0.62378483 0.64646792 0.68373299 0.69539857\n",
      " 0.68243681 0.6749838  0.67109527 0.65845755 0.65554115 0.67401167\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.69105506 0.69514579 0.70110106 0.70749176]\n",
      "4 day output [[0.7138941]]\n",
      "5 day input [0.62151653 0.62313675 0.61989631 0.61665587 0.63188594 0.61827609\n",
      " 0.61276734 0.62378483 0.64646792 0.68373299 0.69539857 0.68243681\n",
      " 0.6749838  0.67109527 0.65845755 0.65554115 0.67401167 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506\n",
      " 0.69514579 0.70110106 0.70749176 0.71389413]\n",
      "5 day output [[0.7202258]]\n",
      "6 day input [0.62313675 0.61989631 0.61665587 0.63188594 0.61827609 0.61276734\n",
      " 0.62378483 0.64646792 0.68373299 0.69539857 0.68243681 0.6749838\n",
      " 0.67109527 0.65845755 0.65554115 0.67401167 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579\n",
      " 0.70110106 0.70749176 0.71389413 0.72022581]\n",
      "6 day output [[0.7264628]]\n",
      "7 day input [0.61989631 0.61665587 0.63188594 0.61827609 0.61276734 0.62378483\n",
      " 0.64646792 0.68373299 0.69539857 0.68243681 0.6749838  0.67109527\n",
      " 0.65845755 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106\n",
      " 0.70749176 0.71389413 0.72022581 0.72646278]\n",
      "7 day output [[0.73259664]]\n",
      "8 day input [0.61665587 0.63188594 0.61827609 0.61276734 0.62378483 0.64646792\n",
      " 0.68373299 0.69539857 0.68243681 0.6749838  0.67109527 0.65845755\n",
      " 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176\n",
      " 0.71389413 0.72022581 0.72646278 0.73259664]\n",
      "8 day output [[0.7386438]]\n",
      "9 day input [0.63188594 0.61827609 0.61276734 0.62378483 0.64646792 0.68373299\n",
      " 0.69539857 0.68243681 0.6749838  0.67109527 0.65845755 0.65554115\n",
      " 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413\n",
      " 0.72022581 0.72646278 0.73259664 0.73864383]\n",
      "9 day output [[0.74463975]]\n",
      "10 day input [0.61827609 0.61276734 0.62378483 0.64646792 0.68373299 0.69539857\n",
      " 0.68243681 0.6749838  0.67109527 0.65845755 0.65554115 0.67401167\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581\n",
      " 0.72646278 0.73259664 0.73864383 0.74463975]\n",
      "10 day output [[0.75063044]]\n",
      "11 day input [0.61276734 0.62378483 0.64646792 0.68373299 0.69539857 0.68243681\n",
      " 0.6749838  0.67109527 0.65845755 0.65554115 0.67401167 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506\n",
      " 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278\n",
      " 0.73259664 0.73864383 0.74463975 0.75063044]\n",
      "11 day output [[0.75665843]]\n",
      "12 day input [0.62378483 0.64646792 0.68373299 0.69539857 0.68243681 0.6749838\n",
      " 0.67109527 0.65845755 0.65554115 0.67401167 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579\n",
      " 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278 0.73259664\n",
      " 0.73864383 0.74463975 0.75063044 0.75665843]\n",
      "12 day output [[0.7627566]]\n",
      "13 day input [0.64646792 0.68373299 0.69539857 0.68243681 0.6749838  0.67109527\n",
      " 0.65845755 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106\n",
      " 0.70749176 0.71389413 0.72022581 0.72646278 0.73259664 0.73864383\n",
      " 0.74463975 0.75063044 0.75665843 0.76275659]\n",
      "13 day output [[0.76894164]]\n",
      "14 day input [0.68373299 0.69539857 0.68243681 0.6749838  0.67109527 0.65845755\n",
      " 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176\n",
      " 0.71389413 0.72022581 0.72646278 0.73259664 0.73864383 0.74463975\n",
      " 0.75063044 0.75665843 0.76275659 0.76894164]\n",
      "14 day output [[0.7752159]]\n",
      "15 day input [0.69539857 0.68243681 0.6749838  0.67109527 0.65845755 0.65554115\n",
      " 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413\n",
      " 0.72022581 0.72646278 0.73259664 0.73864383 0.74463975 0.75063044\n",
      " 0.75665843 0.76275659 0.76894164 0.77521592]\n",
      "15 day output [[0.7815657]]\n",
      "16 day input [0.68243681 0.6749838  0.67109527 0.65845755 0.65554115 0.67401167\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581\n",
      " 0.72646278 0.73259664 0.73864383 0.74463975 0.75063044 0.75665843\n",
      " 0.76275659 0.76894164 0.77521592 0.78156573]\n",
      "16 day output [[0.78796655]]\n",
      "17 day input [0.6749838  0.67109527 0.65845755 0.65554115 0.67401167 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506\n",
      " 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278\n",
      " 0.73259664 0.73864383 0.74463975 0.75063044 0.75665843 0.76275659\n",
      " 0.76894164 0.77521592 0.78156573 0.78796655]\n",
      "17 day output [[0.7943864]]\n",
      "18 day input [0.67109527 0.65845755 0.65554115 0.67401167 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579\n",
      " 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278 0.73259664\n",
      " 0.73864383 0.74463975 0.75063044 0.75665843 0.76275659 0.76894164\n",
      " 0.77521592 0.78156573 0.78796655 0.79438639]\n",
      "18 day output [[0.8007897]]\n",
      "19 day input [0.65845755 0.65554115 0.67401167 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106\n",
      " 0.70749176 0.71389413 0.72022581 0.72646278 0.73259664 0.73864383\n",
      " 0.74463975 0.75063044 0.75665843 0.76275659 0.76894164 0.77521592\n",
      " 0.78156573 0.78796655 0.79438639 0.80078971]\n",
      "19 day output [[0.807141]]\n",
      "20 day input [0.65554115 0.67401167 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176\n",
      " 0.71389413 0.72022581 0.72646278 0.73259664 0.73864383 0.74463975\n",
      " 0.75063044 0.75665843 0.76275659 0.76894164 0.77521592 0.78156573\n",
      " 0.78796655 0.79438639 0.80078971 0.80714101]\n",
      "20 day output [[0.8134076]]\n",
      "21 day input [0.67401167 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413\n",
      " 0.72022581 0.72646278 0.73259664 0.73864383 0.74463975 0.75063044\n",
      " 0.75665843 0.76275659 0.76894164 0.77521592 0.78156573 0.78796655\n",
      " 0.79438639 0.80078971 0.80714101 0.8134076 ]\n",
      "21 day output [[0.81956196]]\n",
      "22 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581\n",
      " 0.72646278 0.73259664 0.73864383 0.74463975 0.75063044 0.75665843\n",
      " 0.76275659 0.76894164 0.77521592 0.78156573 0.78796655 0.79438639\n",
      " 0.80078971 0.80714101 0.8134076  0.81956196]\n",
      "22 day output [[0.82558215]]\n",
      "23 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506\n",
      " 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278\n",
      " 0.73259664 0.73864383 0.74463975 0.75063044 0.75665843 0.76275659\n",
      " 0.76894164 0.77521592 0.78156573 0.78796655 0.79438639 0.80078971\n",
      " 0.80714101 0.8134076  0.81956196 0.82558215]\n",
      "23 day output [[0.8314513]]\n",
      "24 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579\n",
      " 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278 0.73259664\n",
      " 0.73864383 0.74463975 0.75063044 0.75665843 0.76275659 0.76894164\n",
      " 0.77521592 0.78156573 0.78796655 0.79438639 0.80078971 0.80714101\n",
      " 0.8134076  0.81956196 0.82558215 0.8314513 ]\n",
      "24 day output [[0.8371586]]\n",
      "25 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106\n",
      " 0.70749176 0.71389413 0.72022581 0.72646278 0.73259664 0.73864383\n",
      " 0.74463975 0.75063044 0.75665843 0.76275659 0.76894164 0.77521592\n",
      " 0.78156573 0.78796655 0.79438639 0.80078971 0.80714101 0.8134076\n",
      " 0.81956196 0.82558215 0.8314513  0.83715862]\n",
      "25 day output [[0.84269637]]\n",
      "26 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176\n",
      " 0.71389413 0.72022581 0.72646278 0.73259664 0.73864383 0.74463975\n",
      " 0.75063044 0.75665843 0.76275659 0.76894164 0.77521592 0.78156573\n",
      " 0.78796655 0.79438639 0.80078971 0.80714101 0.8134076  0.81956196\n",
      " 0.82558215 0.8314513  0.83715862 0.84269637]\n",
      "26 day output [[0.8480617]]\n",
      "27 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413\n",
      " 0.72022581 0.72646278 0.73259664 0.73864383 0.74463975 0.75063044\n",
      " 0.75665843 0.76275659 0.76894164 0.77521592 0.78156573 0.78796655\n",
      " 0.79438639 0.80078971 0.80714101 0.8134076  0.81956196 0.82558215\n",
      " 0.8314513  0.83715862 0.84269637 0.84806168]\n",
      "27 day output [[0.8532516]]\n",
      "28 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.69105506 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581\n",
      " 0.72646278 0.73259664 0.73864383 0.74463975 0.75063044 0.75665843\n",
      " 0.76275659 0.76894164 0.77521592 0.78156573 0.78796655 0.79438639\n",
      " 0.80078971 0.80714101 0.8134076  0.81956196 0.82558215 0.8314513\n",
      " 0.83715862 0.84269637 0.84806168 0.85325158]\n",
      "28 day output [[0.85826546]]\n",
      "29 day input [0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681\n",
      " 0.68243681 0.68243681 0.68243681 0.68243681 0.68243681 0.69105506\n",
      " 0.69514579 0.70110106 0.70749176 0.71389413 0.72022581 0.72646278\n",
      " 0.73259664 0.73864383 0.74463975 0.75063044 0.75665843 0.76275659\n",
      " 0.76894164 0.77521592 0.78156573 0.78796655 0.79438639 0.80078971\n",
      " 0.80714101 0.8134076  0.81956196 0.82558215 0.8314513  0.83715862\n",
      " 0.84269637 0.84806168 0.85325158 0.85826546]\n",
      "29 day output [[0.8631029]]\n",
      "[[0.6910550594329834], [0.6951457858085632], [0.7011010646820068], [0.7074917554855347], [0.7138941287994385], [0.7202258110046387], [0.7264627814292908], [0.7325966358184814], [0.7386438250541687], [0.7446397542953491], [0.7506304383277893], [0.7566584348678589], [0.7627565860748291], [0.7689416408538818], [0.7752159237861633], [0.7815657258033752], [0.7879665493965149], [0.7943863868713379], [0.8007897138595581], [0.8071410059928894], [0.8134075999259949], [0.8195619583129883], [0.8255821466445923], [0.8314512968063354], [0.8371586203575134], [0.8426963686943054], [0.8480616807937622], [0.853251576423645], [0.8582654595375061], [0.863102912902832]]\n"
     ]
    }
   ],
   "source": [
    "#forecasting data for 30 days\n",
    "output=[]\n",
    "n_steps = 100\n",
    "i = 0\n",
    "while(i<30):\n",
    "\n",
    "    if(len(temp_ip)>100):\n",
    "        #print(temp_ip)\n",
    "        xinput = np.array(temp_ip[1:])\n",
    "        print(\"{} day input {}\".format(i,xinput))\n",
    "        xinput = xinput.reshape(1,-1)\n",
    "        xinput = xinput.reshape((1, n_steps, 1))\n",
    "        #print(xinput)\n",
    "        yhat = model.predict(xinput, verbose=0)\n",
    "        print(\"{} day output {}\".format(i,yhat))\n",
    "        temp_ip.extend(yhat[0].tolist())\n",
    "        temp_ip = temp_ip[1:]\n",
    "        #print(temp_ip)\n",
    "        output.extend(yhat.tolist())\n",
    "        i=i+1\n",
    "    else:\n",
    "        xinput = xinput.reshape((1, n_steps,1))\n",
    "        yhat = model.predict(xinput, verbose=0)\n",
    "        print(yhat[0])\n",
    "        temp_ip.extend(yhat[0].tolist())\n",
    "        print(len(temp_ip))\n",
    "        output.extend(yhat.tolist())\n",
    "        i = i+1\n",
    "\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "id": "Nl9HdvZR7bA0"
   },
   "outputs": [],
   "source": [
    "day_new = np.arange(1, 101)\n",
    "day_pred = np.arange(101, 131)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_M1sm9qk_ow1",
    "outputId": "e2aa23b7-1587-4377-b671-d2dd49c8ac63"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1162"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_close)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 539
    },
    "id": "T_zHoKCe_yn8",
    "outputId": "19de97f6-81ca-48fb-c1d2-893c4c5fa103"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7a718fc81a20>"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(day_new, scaler.inverse_transform(df_close[len(df_close)-100:]))\n",
    "plt.plot(day_pred, scaler.inverse_transform(output))\n",
    "plt.legend(['Previous Data', 'Forecast'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 539
    },
    "id": "NbrRqY0KAuQi",
    "outputId": "0e7564ce-59c7-4502-fb02-27938d982680"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a718fcef5b0>]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_new = df_close.tolist()\n",
    "df_new.extend(output)\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(df_new[1000:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 554
    },
    "id": "s5eWn3PmEZ28",
    "outputId": "022281c2-19b7-4f4c-eeec-711bbafae0b1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7a719e399180>]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_new = scaler.inverse_transform(df_new).tolist()\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(df_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TtoS17sIFK6h"
   },
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
